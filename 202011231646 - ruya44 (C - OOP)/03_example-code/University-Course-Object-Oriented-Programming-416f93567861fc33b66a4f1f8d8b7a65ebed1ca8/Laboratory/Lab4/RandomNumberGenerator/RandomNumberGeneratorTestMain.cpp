/*****************************************
 * RandomNumberGeneratorTestMain.cpp     *
 *****************************************
 * IDE : Xcode                           *
 * Author : SÌ§afak AKINCI                 *
 * Experiment 4: Classes And Objects-I   *
 *****************************************/

#include "RandomNumberGenerator.h"      //To use functions which is declared in RandomNumberGenerator.h .
#include <iostream>                     //To use standart input output functions.
using namespace std;                    //To use standart input and output functions under the "std" namespace.

//Checks the integer number that is generated by getRandomInteger function whether it is between asked range or not.
void TEST_RandomInteger(RandomNumberGenerator& generator, int lowerBound, int upperBound)
{
    int randomNumber = generator.getRandomInteger(lowerBound, upperBound);
    
    if (randomNumber >= lowerBound && randomNumber <= upperBound)
    {
        cout << "SUCCESS:" << randomNumber << endl;
    }
    else
    {
        cout << "FAILURE : Obtained number is not between the range [" <<
        lowerBound << "," << upperBound << "]" << endl;
    }
}//end TEST_RandomInteger ()

//Checks the float number that is generated by getRandomFloat function whether it is between asked range or not.
void TEST_RandomFloat(RandomNumberGenerator& generator, float lowerBound, float upperBound, RandomNumberGenerator::Precision precision)
{
    float randomNumber = generator.getRandomFloat(lowerBound, upperBound, precision);
    
    if (randomNumber >= lowerBound && randomNumber <= upperBound)
    {
        cout << "SUCCESS:" << randomNumber << endl;
    }
    else
    {
        cout << "FAILURE : Obtained number is not between the range [" <<
        lowerBound << "," << upperBound << "]" << endl;
    }
    
}//end TEST_RandomFloat ()

//Checks the double number that is generated by getRandomDouble function whether it is between asked range or not.
void TEST_RandomDouble(RandomNumberGenerator& generator, double lowerBound, double upperBound, RandomNumberGenerator::Precision precision)
{
    double randomNumber = generator.getRandomDouble(lowerBound, upperBound, precision);
    
    if (randomNumber >= lowerBound && randomNumber <= upperBound)
    {
        cout << "SUCCESS:" << randomNumber << endl;
    }
    else
    {
        cout << "FAILURE : Obtained number is not between the range [" <<
        lowerBound << "," << upperBound << "]" << endl;
    }
}//end TEST_RandomDouble ()

//Gets a character that is created by getRandomCharacter function, and prints "SUCCESS".
void TEST_RandomCharacter(RandomNumberGenerator& generator, RandomNumberGenerator::CharacterType type)
{
    char randomCharacter = generator.getRandomCharacter(type);
    
    cout << "SUCCESS:" << randomCharacter << endl;
}//TEST_RandomCharacter ()

//Gets a circle object that is created by getRandomCircle function (RandomNumberGenerator's class function),
//and prints its private members (centerX, centerY, radius).
void TEST_RandomCircle(RandomNumberGenerator& generator, float lowerBound, float upperBound, RandomNumberGenerator::Precision precision)
{
    Circle crc = generator.getRandomCircle(lowerBound, upperBound, precision);
    cout<<"Radius:\t"<<crc.getRadius()<<endl;
    cout<<"CenterX:\t"<<crc.getCenterX()<<endl;
    cout<<"CenterY:\t"<<crc.getCenterY()<<endl;
}

int main ()
{
    RandomNumberGenerator generator;
    
    cout<< "+---------------------+" << endl
        << "| Random Integer Test |" << endl
        << "+---------------------+" << endl;
    
    TEST_RandomInteger(generator, 5, 20);
    TEST_RandomInteger(generator, 2, 60);
    
    cout<< "+-------------------+" << endl
        << "| Random Float Test |" << endl
        << "+-------------------+" << endl;
    
    TEST_RandomFloat(generator, 5, 20, RandomNumberGenerator::Precision::ONE);
    TEST_RandomFloat(generator, 5, 20, RandomNumberGenerator::Precision::TWO);
    TEST_RandomFloat(generator, 5, 20, RandomNumberGenerator::Precision::THREE);
    TEST_RandomFloat(generator, 5, 20, RandomNumberGenerator::Precision::FOUR);
    
    cout<< "+--------------------+" << endl
        << "| Random Double Test |" << endl
        << "+--------------------+" << endl;
    
    TEST_RandomDouble(generator, 5, 20, RandomNumberGenerator::Precision::ONE);
    TEST_RandomDouble(generator, 5, 20, RandomNumberGenerator::Precision::TWO);
    TEST_RandomDouble(generator, 5, 20, RandomNumberGenerator::Precision::THREE);
    TEST_RandomDouble(generator, 5, 20, RandomNumberGenerator::Precision::FOUR);
    
    cout<< "+-----------------------+" << endl
        << "| Random Character Test |" << endl
        << "+-----------------------+" << endl;
    
    TEST_RandomCharacter(generator, RandomNumberGenerator::CharacterType::LOWER_LETTER);
    TEST_RandomCharacter(generator, RandomNumberGenerator::CharacterType::UPPER_LETTER);
    TEST_RandomCharacter(generator, RandomNumberGenerator::CharacterType::DIGIT);
    
    //    AT QUIZ
    cout<< "+-----------------------+" << endl
        << "|    Random Circle      |" << endl
        << "+-----------------------+" << endl;
    
    TEST_RandomCircle(generator, 5, 20, RandomNumberGenerator::Precision::ONE);
    
    return 0;
    
}//end main ()
