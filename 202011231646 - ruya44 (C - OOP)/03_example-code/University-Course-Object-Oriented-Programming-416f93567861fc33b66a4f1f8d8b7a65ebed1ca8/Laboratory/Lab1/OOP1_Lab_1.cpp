/*****************************************
 * OOP1_Lab_1.cpp                        *
 *****************************************
 * IDE : Xcode                           *
 * Author : Åžafak AKINCI                 *
 * Experiment 1: Introduction to C++ - I *
 *****************************************/

#include <iostream>
#include <time.h>           //to call rand() function.
#include <iomanip>          //to call setw() function.
#include <string>           //to declare string variables.
#include <math.h>           //to call sqrt() function.
using namespace std;        //to don't write for each code std::            (e.x. std::cout )

bool TakeUserInput(int& data_size, int& min_number, int& max_number);
int* CreateDataSet(int dataSize, int min_number, int max_number);
double CalculateMean(int* data_array, int data_size);
double CalculateVariance(int* data_array, int data_size, double mean);
double CalculateStandartDeviation(int* data_array, int data_size, double mean);
double* CalculateZScore(int* data_array, int data_size, double mean, double std_deviation);
void PrintMessage(const string& message);
void PrintDataArray(int* data_array, int data_size);
void PrintMean(double mean);
void PrintVariance(double variance);
void PrintStandartDeviation(double std_deviation);
void PrintZScoreArray(double* zscore, int data_size);
double* CalculateTScore(int* data_array, int data_size, double mean, double std_deviation);
void PrintTScoreArray(double* tscore, int data_size);

//At Quiz
double* CalculateDecimalScaledData (int* data_array, int data_size);
int FindMinJValue (int* data_array, int data_size);
double FindAbsoluteMax (int* data_array, int data_size);
void PrintDecimalScaledData (double* decimal_scaled_data, int data_size);

int main()
{
    srand( (unsigned) time(NULL));
    int dataSize, minNumber, maxNumber;
    
    if (!TakeUserInput(dataSize, minNumber, maxNumber)){
        PrintMessage("TERMINATED BY USER!");
        return 1;
    }
    
    int* DataArray = CreateDataSet(dataSize,minNumber,maxNumber);
    //The dynamic array's address that is returned from CreateDataSet function is assigned to pointer called DataArray.
    PrintDataArray(DataArray, dataSize);
    
    double mean = CalculateMean(DataArray, dataSize);
    PrintMean(mean);
    
    double variance = CalculateVariance(DataArray, dataSize, mean);
    PrintVariance(variance);
    
    double stdDeviation = CalculateStandartDeviation(DataArray, dataSize, mean);
    PrintStandartDeviation(stdDeviation);
    
    double* zscore = CalculateZScore(DataArray, dataSize, mean, stdDeviation);
    //The dynamic array's address that is returned from CalculateZScore function is assigned to pointer called DataArray.
    PrintZScoreArray(zscore, dataSize);
    
    double* tscore = CalculateTScore(DataArray, dataSize, mean, stdDeviation);
    PrintTScoreArray(tscore, dataSize);
    
    double* DecimalScaledData = CalculateDecimalScaledData(DataArray, dataSize);
    PrintDecimalScaledData (DecimalScaledData, dataSize);
    
    return 0;
}

//TakeUserInput will take three input from the user, data_size, min_number, max_number
//and return true to the main function if the data_size is different from 0.
bool TakeUserInput(int& data_size, int& min_number, int& max_number){
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    //  There is 2 "|" and "USER INPUT" 10.        10+2=12;
    //  26-12=14;   14/2=7;     7 + 10(USER INPUT) = 17;   To center "USER INPUT", setw(17)
    cout<<"|"<<setw(17)<<"USER INPUT"<<setw(9)<<"|\n";
    //  |       USER INPUT       |
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    cout<<"Please, enter the data_size! Enter 0 to terminate:\t\t";     cin>>data_size;
    if(data_size==0)
        return false;
    
    cout<<"Please, enter the min_number:\t";    cin>>min_number;
    cout<<"Please, entert the max_number:\t";   cin>>max_number;
    return true;
}

//PrintMessage will print the const string variable called "message" to console.
void PrintMessage(const string& message){
    cout<<endl<<message<<endl;
}

//CreateDataSet will create an array that generated by random numbers between the min_number and max_number.
int* CreateDataSet(int dataSize, int min_number, int max_number){
    //      If we declare an array it will create in STACK,
    //we will lost its elements after the CreateDataSet function ended.
    //      We should create a dynamic array to reach its elements and address
    //from another functions even if CreateDataSet function ends.
    //Because the array will be created in HEAP, so we won't lost its elements.
    
    int* array = new int [dataSize];
    
    //Random numbers between min_number and max_number is assigned to dynamic array.
    for(int i=0; i<dataSize; i++)
        array[i] = min_number + rand() % (max_number - min_number + 1);
    
    //The first element's address of the dynamic array is returned to the main function.
    return array;
}

//PrintDataArray will print the whole elements of the array.
//It takes one pointer that holds the first element's address of the array and one integer value called data_size.
void PrintDataArray(int* data_array, int data_size){
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
            else if(i==25)  cout<<"+\n";
                else    cout<<"-";
    }// +------------------------+
    
    //  There is 2 "|" and the size of the "DATA ARRAY" 10.     10+2=12;
    //  26-12=14;   14/2=7;     7 + 10(DATA ARRAY) = 17;    To center "DATA ARRAY", setw(17)
    cout<<"|"<<setw(17)<<"DATA ARRAY"<<setw(9)<<"|\n";
    //  |       DATA ARRAY       |
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    for(int i=0; i<data_size; i++)
        cout<<"|"<<setw(24)<<data_array[i]<<"|"<<endl;
    //  |                       i|
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
}

//CalculateMean calculates the mean of the array and returns it to main function.
//It takes one pointer that holds the first element's address of the array and one integer value called data_size.
double CalculateMean(int* data_array, int data_size){
    
    double total=0;
    
    //Whole elements of the array is totaled.
    for(int i=0; i<data_size; i++)
        total+=data_array[i];
    
    // (total / data_size) is equal to mean and it will return to main function.
    return ( total / data_size );
}

//PrintMean just prints the variable called mean that is sent from main function.
void PrintMean(double mean){
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    //  There is 2 "|" and "MEAN" 4.        4+2=6;
    //  26-6=20;   20/2=10;     10 + 4(MEAN) = 14;   To center "MEAN", setw(14)
    cout<<"|"<<setw(14)<<"MEAN"<<setw(12)<<"|\n";
    //  |          MEAN          |
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    cout<<"|"<<setw(24)<<mean<<"|\n";
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
}

//CalculateVariance calculates the variance of the array and returns it to main function.
//      It takes one pointer that holds the first element's address of the array,
//one integer value called data_size and one double called mean.
double CalculateVariance(int* data_array, int data_size, double mean){
    double variance=0;
    
    for(int i=0; i<data_size; i++)
        variance+=pow( (data_array[i] - mean) , 2);
    
    //  The variable "variance" is now the total of the formula. (Variance / data_size) gives us the variance.
    //  It is done that to get rid of more variable (e.x. total).
    return ( variance / data_size );
}

//PrintVariance just prints the variable called variance that is sent from main function.
void PrintVariance(double variance){
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    //  There is 2 "|" and "VARIANCE" 8.        8+2=10;
    //  26-10=16;   16/2=8;     8 + 8(VARIANCE) = 16;    To center "VARIANCE", setw(16)
    cout<<"|"<<setw(16)<<"VARIANCE"<<setw(10)<<"|\n";
    //  |        VARIANCE        |
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    cout<<"|"<<setw(24)<<variance<<"|\n";
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+

}

//CalculateStandartDeviation calculates the standart deviation of the array and returns it to main function.
//      It takes one pointer that holds the first element's address of the array,
//one integer variable called data_size and one double called mean.
double CalculateStandartDeviation(int* data_array, int data_size, double mean){
    double variance=0;
    
    for(int i=0; i<data_size; i++)
        variance+=pow( (data_array[i] - mean) , 2);
    
    //  The variable "variance" is now the total of the formula. (Variance / data_size) gives us the variance.
    //  It is done that to get rid of more variable (e.x. total).
    //  Square root of the variance gives us the standart deviation of the array.
    return sqrt(variance / data_size);
}

//PrintStandartDeviation just prints the variable called st_deviation that is sent from main function.
void PrintStandartDeviation(double std_deviation){
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    //  There is 2 "|" and "STANDART DEVIATION" 18.     18+2=20;
    //  26-20=6;   6/2=3;     3 + 18(STANDART DEVIATION) = 21;    To center "STANDART DEVIATION", setw(21)
    cout<<"|"<<setw(21)<<"STANDART DEVIATION"<<setw(5)<<"|\n";
    //  |   STANDART DEVIATION   |
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    cout<<"|"<<setw(24)<<std_deviation<<"|"<<endl;
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
}

//CalculateZScore calculates the Z score of each elements of the array and returns this zScoreArray to main function.
//Function returns the first element's address of the zScore, to do that zScoreArray should be declared as dynamic array.
//      It takes one pointer that holds the first element's address of the array,
//one integer variable called data_size, and two double variables called mean and std_deviation.
double* CalculateZScore(int* data_array, int data_size, double mean, double std_deviation){
    double* zScoreArray = new double [data_size];
    
    for(int i=0; i<data_size; i++)
        zScoreArray[i] = (data_array[i]-mean) / std_deviation;
    
    //The first element's address of the zScoreArray is returned to the main function.
    return zScoreArray;
}

//PrintZScoreArray prints the whole elements of the array.
//It takes one pointer that holds the first element's address of the zScoreArray and one integer value called data_size.
void PrintZScoreArray(double* zscore, int data_size){
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    //  There is 2 "|" and the size of the "Z__SCORE" 8.     8+2=10;
    //  26-10=16;   16/2=8;     8 + 8(Z__SCORE) = 16;    To center "Z__SCORE", setw(16)
    cout<<"|"<<setw(16)<<"Z__SCORE"<<setw(10)<<"|\n";
    //  |        Z__SCORE        |
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    for(int i=0; i<data_size; i++)
        cout<<"|"<<setw(24)<<zscore[i]<<"|"<<endl;
    //  |                       i|
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
}

//CalculateTScore calculates the T score of each elements of the array and returns this tScoreArray to main function.
//Function returns the first element's address of the tScoreArray, to do that tScoreArray should be declared as dynamic array.
//      It takes one pointer that holds the first element's address of the array,
//one integer variable called data_size, and three double variables called data_size, mean and std_deviation.
double* CalculateTScore(int* data_array, int data_size, double mean, double std_deviation){
    double* tScoreArray = new double [data_size];
    
    for(int i=0; i<data_size; i++)
        tScoreArray[i] = 10 * ( (data_array[i] - mean) / std_deviation ) + 50;
    
    //The first element's address of the tScoreArray is returned to the main function.
    return tScoreArray;
}

//PrintTScoreArray prints the whole elements of the array.
//It takes one pointer that holds the first element's address of the tScoreArray and one integer value called data_size.
void PrintTScoreArray(double* tscore, int data_size){
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    //  There is 2 "|" and the size of the "Z__SCORE" 8.     8+2=10;
    //  26-10=16;   16/2=8;     8 + 8(T__SCORE) = 16;    To center "T__SCORE", setw(16)
    cout<<"|"<<setw(16)<<"T__SCORE"<<setw(10)<<"|\n";
    //  |        T__SCORE        |
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    for(int i=0; i<data_size; i++)
        cout<<"|"<<setw(24)<<tscore[i]<<"|"<<endl;
    //  |                       i|
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
}

//      CalculatedDecimalScaledData will divide each element of the array to the minimimJ'th power of ten,
//and return the whole array to main function.
double* CalculateDecimalScaledData (int* data_array, int data_size){
    int minimumJ = FindMinJValue(data_array, data_size);
    
    double* minJArray = new double [data_size];
    
    for(int i=0; i<data_size; i++)
        minJArray[i] = data_array[i] / pow(10,minimumJ);
    
    return minJArray;
}

//FindMinJValue will divide each element of the array to the nth power of ten, and return n as MinJValue.
int FindMinJValue (int* data_array, int data_size){
    
    double absoluteMaximum = FindAbsoluteMax(data_array, data_size);
    
    //If absoluteMaximum is lower than one, function will return the power of ten.
    
    int power=0;
    for( ; !(absoluteMaximum<1); power++)
        absoluteMaximum /= pow(10,power);
    
    return power-1;
}

//FindAbsoluteMax will find the absolute maximum value of the array and return it.
double FindAbsoluteMax (int* data_array, int data_size){
    int temp, maximumNumber;
    
    if(data_array[0]<0)         //If data_array[0] is lower than 0, so it is negative number.
        temp = temp * -1;       //data_array[0] is positive number.
    
    maximumNumber = temp;                 //The absolute of data_array[0] which is called "temp" is assigned to maximumNumber.
    
    for(int i=0; i<data_size; i++){
        temp = data_array[i];
        
        if(temp<0)              //data_array[i] is lower than 0, so it is negative number.
            temp = temp*-1;     //data_array[i] is positive number now.
        
        if(temp>maximumNumber)           //If the absolute of data_array[i] which is called "temp" is bigger than max.
            maximumNumber = temp;        //It is assigned
        
    }//end for
    return maximumNumber;
}

//PrintDecimalScaledData will print the whole elements of the array.
void PrintDecimalScaledData (double* DecimalScaledData, int data_size){
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    //  There is 2 "|" and the size of the "DecimalScaltedData" 18.     18+2=20;
    //  26-20=6;   6/2=3;     3 + 18(DecimalScaledData) = 21;    To center "DecimalScaledData", setw(21)
    cout<<"|"<<setw(21)<<"DecimalScaledData"<<setw(5)<<"|\n";
    //  |    DecimalScaledData   |
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
    
    for(int i=0; i<data_size; i++)
        cout<<"|"<<setw(24)<<DecimalScaledData[i]<<"|"<<endl;
    //  |                       i|
    
    for(int i=0; i<=25; i++){
        if(i==0)    cout<<"+";
        else if(i==25)  cout<<"+\n";
        else    cout<<"-";
    }// +------------------------+
}
